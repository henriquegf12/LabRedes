module moduloTX(Clk,TxEn,TxData,TxDone,Tx,Tick,NBits);

input Clk,TxEn,Tick;	
input [3:0]NBits;		
input [7:0]TxData;	

output Tx;
output TxDone;


reg  TxDone = 1'b0;			
reg  Tx;				
reg write = 1'b0;					
reg startBit = 1'b1;		
reg stopBit = 1'b0;			
reg [4:0] Bit = 5'b00000;		
reg [3:0] counter = 4'b0000;		
reg [7:0] in_data=8'b00000000;		
			




always @ (posedge Tick)
begin

	if (!write)				
	begin
	TxDone = 1'b0;
	startBit <=1'b1;
	stopBit <= 1'b0;
	end

	if (write)				
	begin
	counter <= counter+1;				
	
	if(startBit & !stopBit)			
	begin
	Tx <=1'b0;					
	in_data <= TxData;				
	end		

	if ((counter == 4'b1111) & (startBit) )	
	begin		
	startBit <= 1'b0;
	in_data <= {1'b0,in_data[7:1]};
	Tx <= in_data[0];
	end


	if ((counter == 4'b1111) & (!startBit) &  (Bit < NBits-1))	
	begin		
	in_data <= {1'b0,in_data[7:1]};
	Bit<=Bit+1;
	Tx <= in_data[0];
	startBit <= 1'b0;
	counter <= 4'b0000;
	end	



	
	if ((counter == 4'b1111) & (Bit == NBits-1) & (!stopBit))	
	begin
	Tx <= 1'b1;	
	counter <= 4'b0000;	
	stopBit<=1'b1;
	end

	if ((counter == 4'b1111) & (Bit == NBits-1) & (stopBit) )	
	Bit <= 4'b0000;
	TxDone <= 1'b1;
	counter <= 4'b0000;
	//startBit <=1'b1;
	end
	
	end






endmodule